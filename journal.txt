################################################
Aug-2019; ASuMa

The current repo is an attempt to test the ULL pipeline, and some of its components,
on a number of grammars.

grammar_generator.py creates a random grammar given a set of parameters.
We will experiment with randomly created grammars, which follow a number of parameters,
specified in the header of file of such a grammar:
% RANDOM GRAMMAR with parameters:
% num_words = 20
% num_classes = 4
% num_class_connectors = 7
% connectors_limit = 2

sentence_generator.py generates random sentences using a specified grammar.

corpus_generator.py uses the previously mentioned files to generate a random corpus.

First we use very simple hand-coded grammars as a sanity test to make sure the ULL grammar
learner (https://github.com/singnet/language-learning)
does what is required in a basic POC, perhaps similar to POC-Turtle and POC-English,
but starting from a given grammar instead of arbitrary sentences. 
An advantage of generating a grammar this way is that we can get an 
arbitrary number of sentences from it, so building large lexical
corpora from it is much easier than crafting them by hand.

The first tested gramar is in data/rangram0.grammar and consists of 6 grammatical classes
(2 related to nouns, 1 to verbs, 1 to adjectives, 1 to adverbs and 1 to determiners).
Each class has only one possible word and disjuncts are created having in mind the
English language rules; no Zipfian distributions are expected in the resulting corpus.

First corpora generated in workdir are of size 5, 10, 50, 100, 200, 500 and 1000 sentences.
For each corpus, only a subset of the sentences are unique. The following lists the nbr
of unique sentences per corpus size in this experiment:

SIZE  	UNIQUE SENTS
5		5
10		10
50		28
100		48
200		68
500		75
1000	77

################################################
Sept-2019 ASuMa

Grammar Learner tests with simple rangram0.grammar and ILE were successful: grammar was learned perfectly (as evaluated by parse-evaluator F1 score) from the 5-sentence corpus. First proof of concept.
Running grammar-learner + parse-evaluator as
> language-learning/pipeline/ppln.py rangram0_ILE.json
Results in 
> langauge-learning/output/rangram0/5sent/



